interface ErrorData {
    correlationId: String
}

interface ErrorResponse {
    type: String!
    message: String
    data: ErrorData
}

type NotFoundError implements ErrorResponse {
    type: String!
    message: String
    data: ErrorData
}

type UnAuthorizedError implements ErrorResponse {
    type: String!
    message: String
    data: ErrorData
}

type UserIsBusy implements ErrorResponse {
    type: String!
    message: String
    data: ErrorData
    reason: String
}

type User {
    id: String!
    name: String
}

type Query {
    "The union format"
    userUnion(id: String!): UserUnionResponse
    "The result format"
    userResult(id: String!): UserResultResponse
    user(id: String!): User
}

union UserUnionResponse = User | UserIsBusy | NotFoundError | UnAuthorizedError

enum ResponseType {
    SUCCESS
    ERROR
}

type UserResultResponse {
    type: ResponseType
    success: User
    error: ErrorResponse
}
